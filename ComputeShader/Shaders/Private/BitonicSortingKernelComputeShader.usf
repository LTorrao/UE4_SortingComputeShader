//Since we can't #include private Engine shaders such as Common.ush we have to copy the needed Shaders from the Engine' Shader directory.
#include "/Engine/Private/Common.ush"

////////////////////////////
// Bitonic Sort
// Compute Shader
// by Valentin Kraft
//
// Inspired by the ComputeShaderSort11
// example by Microsoft:
// https://code.msdn.microsoft.com/windowsdesktop/DirectCompute-Basic-Win32-7d5a7408
/////////////////////////////

#define BITONIC_BLOCK_SIZE 1024
#define TRANSPOSE_BLOCK_SIZE 16

#define FLT_MAX 3.402823466e+38

//--------------------------------------------------------------------------------------
// Buffers
//--------------------------------------------------------------------------------------
RWTexture2D<float4> OutputTexture : register(u0);               // Point Positions Output UAV Texture
RWTexture2D<float4> OutputColorTexture : register(u3);          // Point Colors Output UAV Texture
RWStructuredBuffer<float4> PointPosData : register(u1);         // Point Positions Input Buffer
RWStructuredBuffer<float4> PointColorData : register(u4);       // Point Colors Input Buffer
RWStructuredBuffer<float4> PointPosDataBuffer : register(u2);
RWStructuredBuffer<float4> PointColorDataBuffer : register(u5);
//--------------------------------------------------------------------------------------

// Thread group shared memory limit (DX11): 32KB --> 2048 float4 values --> 32 thread groups optimum --> 1024 Threads optimum (?)
// Only shared within a thread group!
groupshared float4 shared_data[BITONIC_BLOCK_SIZE];
groupshared float4 shared_data_colors[BITONIC_BLOCK_SIZE];

// In order to make full use of the resources of the GPU, there should be at least as many thread groups as there are multiprocessors on the GPU, and ideally two or more #ToDo: Make dynamic
// Max number of threads in a group (DX11): 1024
[numthreads(BITONIC_BLOCK_SIZE, 1, 1)]
void MainComputeShader(uint3 Gid : SV_GroupID,             //atm: -, 0...256, - in rows (Y)        --> current group index (dispatched by c++)
                       uint3 DTid : SV_DispatchThreadID,   //atm: 0...256 in rows & columns (XY)   --> "global" thread id
                       uint3 GTid : SV_GroupThreadID,      //atm: 0...256, -,- in columns (X)      --> current threadId in group / "local" threadId
                       uint GI : SV_GroupIndex)            //atm: 0...256 in columns (X)           --> "flattened" index of a thread within a group
{
	// Get current camera position
    float3 camPos = CSVariables.CurrentCamPos;
    
    // Load initial data - mind mapping: Z/X/Y/Z!
    shared_data[GI] = PointPosData[DTid.y * BITONIC_BLOCK_SIZE + DTid.x];
    shared_data_colors[GI] = PointColorData[DTid.y * BITONIC_BLOCK_SIZE + DTid.x];
    GroupMemoryBarrierWithGroupSync();


    // Now each thread must pick the min or max of the two elements it is comparing. The thread cannot compare and swap both elements because that would require random access writes.
    for (unsigned int j = CSVariables.g_iLevel >> 1; j > 0; j >>= 1)
    {
        float3 pos1 = shared_data[GI & ~j];
        float3 pos2 = shared_data[GI | j];

        float dist1 = distance(pos1.gbr, camPos.xyz);
        float dist2 = distance(pos2.gbr, camPos.xyz);

        // Ignore invalid (zero) values
        if (pos1.g == 0 && pos1.b == 0 && pos1.r == 0)
            dist1 = -FLT_MAX;
        if (pos2.g == 0 && pos2.b == 0 && pos2.r == 0)
            dist2 = -FLT_MAX;

        // Atomic compare operation
        float4 result = ((dist1 >= dist2) == (bool) (CSVariables.g_iLevelMask & DTid.x)) ? shared_data[GI ^ j] : shared_data[GI];
        float4 result_color = ((dist1 >= dist2) == (bool) (CSVariables.g_iLevelMask & DTid.x)) ? shared_data_colors[GI ^ j] : shared_data_colors[GI];
        GroupMemoryBarrierWithGroupSync();

        shared_data[GI] = result;
        shared_data_colors[GI] = result_color;
        GroupMemoryBarrierWithGroupSync();
    }

    // Update buffers with sorted values
    PointPosData[DTid.y * BITONIC_BLOCK_SIZE + DTid.x] = shared_data[GI];
    PointPosDataBuffer[DTid.y * BITONIC_BLOCK_SIZE + DTid.x] = shared_data[GI];
    PointColorData[DTid.y * BITONIC_BLOCK_SIZE + DTid.x] = shared_data_colors[GI];
    PointColorDataBuffer[DTid.y * BITONIC_BLOCK_SIZE + DTid.x] = shared_data_colors[GI];
    GroupMemoryBarrierWithGroupSync();

    // Update output textures at the end
    if (CSVariables.g_iLevelMask == BITONIC_BLOCK_SIZE * BITONIC_BLOCK_SIZE)
    {
        OutputTexture[DTid.yx] = shared_data[GI];
        GroupMemoryBarrierWithGroupSync();

        OutputColorTexture[DTid.yx] = shared_data_colors[GI];
        GroupMemoryBarrierWithGroupSync();
    }

    // Visualise threads (debugging)
    //if (CSVariables.g_iLevelMask == 512)
    //    OutputTexture[DTid.xy] = float4(float3(DTid.xy, 0), 0) / 256.0f;
}


//--------------------------------------------------------------------------------------
// Matrix Transpose Compute Shader
//--------------------------------------------------------------------------------------
groupshared float4 transpose_shared_data[TRANSPOSE_BLOCK_SIZE * TRANSPOSE_BLOCK_SIZE];
groupshared float4 transpose_shared_data_colors[TRANSPOSE_BLOCK_SIZE * TRANSPOSE_BLOCK_SIZE];

[numthreads(TRANSPOSE_BLOCK_SIZE, TRANSPOSE_BLOCK_SIZE, 1)]
void TransposeMatrix(uint3 Gid : SV_GroupID,
                     uint3 DTid : SV_DispatchThreadID,
                     uint3 GTid : SV_GroupThreadID,
                     uint GI : SV_GroupIndex)
{
    transpose_shared_data[GI] = PointPosDataBuffer[DTid.y * CSVariables.g_iWidth + DTid.x];
    transpose_shared_data_colors[GI] = PointColorDataBuffer[DTid.y * CSVariables.g_iWidth + DTid.x];
    GroupMemoryBarrierWithGroupSync();

    uint2 XY = DTid.yx - GTid.yx + GTid.xy;
    PointPosData[XY.y * CSVariables.g_iHeight + XY.x] = transpose_shared_data[GTid.x * TRANSPOSE_BLOCK_SIZE + GTid.y];
    PointColorData[XY.y * CSVariables.g_iHeight + XY.x] = transpose_shared_data_colors[GTid.x * TRANSPOSE_BLOCK_SIZE + GTid.y];
    GroupMemoryBarrierWithGroupSync();
}